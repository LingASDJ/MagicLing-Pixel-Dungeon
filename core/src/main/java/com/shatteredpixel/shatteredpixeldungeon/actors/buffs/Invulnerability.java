/*
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2024 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

package com.shatteredpixel.shatteredpixeldungeon.actors.buffs;

import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
import com.watabou.noosa.Game;
import com.watabou.noosa.Image;

public class Invulnerability extends FlavourBuff {

	{
		type = Buff.buffType.POSITIVE;
		announced = true;
	}

	public static final float DURATION	= 3f;

	@Override
	public void fx(boolean on) {
		if (!target.buffs(ChampionEnemy.class).isEmpty()) return;
		if (on) target.sprite.aura( 0xFFFF00 );
		else target.sprite.clearAura();
	}

	@Override
	public int icon() {
		return BuffIndicator.ANKH;
	}

	@Override
	public float iconFadePercent() {
		return Math.max(0, (DURATION - visualcooldown()) / DURATION);
	}

	@Override
	public String toString() {
		return Messages.get(this, "name");
	}

	@Override
	public String desc() {
		return Messages.get(this, "desc", dispTurns());
	}

	{
		immunities.add(Paralysis.class);
		immunities.add(Frost.class);
	}

	public static class GodDied extends Invulnerability {
		@Override
		public int icon() {
			return BuffIndicator.BERSERK;
		}


		private float time;
		@Override
		public void tintIcon(Image icon) {
			time += Game.elapsed / 3.5f;
			float r = 0.33f+0.57f*Math.max(0f, (float)Math.sin( time));
			float g = 0.53f+0.57f*Math.max(0f, (float)Math.sin( time + 2*Math.PI/3 ));
			float b = 0.63f+0.57f*Math.max(0f, (float)Math.sin( time + 4*Math.PI/3 ));
			icon.hardlight(r, g, b);
		}

	}

}
